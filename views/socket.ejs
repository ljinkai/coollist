<!DOCTYPE html>
<html>
<head>
    <%
    tit = "";
    desc = "";
    if (typeof extData === "undefined") {
        tit = "酷粒 - 分享酷的链接";
        desc = "专注优质链接分享的站点,好玩,有趣,有节操,这是一个安静的存在,脑洞大开的地方";
    } else {
        tit = extData.title;
        desc = extData.desc;
    }
    %>
    <title><%= tit %></title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1,user-scalable=no">
    <meta name="keywords"
          content="酷粒,cool list,coollist,kuli,链接,分享,cool link,share & link,好玩,有趣,有节操">
    <meta name="description"
          content="<%= desc %>">
    <meta property="og:title" content="<%= tit %>"/>
    <meta property="og:description" content="<%= desc %>"/>
    <meta property="og:image" content="http://coollist.cn/images/logo.png"/>
    <meta property="og:type" content="item"/>
    <meta property="og:site_name" content="coollist"/>
    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    <link rel="manifest" href="/noti/mainfest.json">
</head>

<body ng-app="app" class="body">
<div class="cl_body">
    <button onClick="doEdit()">Test Socket</button>

    <button class="js-push-button" disabled>
        Enable Push Messages
    </button>
</div>

<script src="/vendor/jquery/jquery.js"></script>
<script src="/vendor/bootstrap/bootstrap.js"></script>
<script src="/vendor/angular/angular.js"></script>

<!--SCRIPTS2-->
<script src="/noti/sails.io.js"></script>
<script src="/js/app.js"></script>
<script src="/js/jquery.cookie.js"></script>
<!--SCRIPTS2 END-->
<script type="text/javascript">
//    window.onload = function subscribeAndListen(){
//        // When the document loads, send a request to users.testSocket
//        // The controller code will subscribe you to all of the 'users' model instances (records)
////        io.socket.get('/common/testSocket');
//
//        // Listen for the event called 'user'
//        io.socket.on('user',function(obj){
//            console.log("print::" + JSON.stringify(obj));
//            if (obj.verb == 'updated') {
//                var previous = obj.previous;
//                var data = obj.data;
//                console.log('User '+previous.name+' has been updated to '+data.name);
//            }
//        });
//    };
//
//    function doEdit(){
//        // Send the name to the testSocket action on the 'Users' contoller
//        io.socket.get('/common/testSocket',{name:'Walter'},function(resData,jwres) {
//            console.log("print::" + JSON.stringify(resData));
//        });
//    }


    //notification

    // Once the service worker is registered set the initial state
    function initialiseState() {
        console.log("initState");
        // Are Notifications supported in the service worker?
        if (!('showNotification' in ServiceWorkerRegistration.prototype)) {
            console.warn('Notifications aren\'t supported.');
            return;
        }

        // Check the current Notification permission.
        // If its denied, it's a permanent block until the
        // user changes the permission
        if (Notification.permission === 'denied') {
            console.warn('The user has blocked notifications.');
            return;
        }

        // Check if push messaging is supported
        if (!('PushManager' in window)) {
            console.warn('Push messaging isn\'t supported.');
            return;
        }
        console.log("before ready");

        // We need the service worker registration to check for a subscription
        navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
            console.log("serviceWorker ready");

            // Do we already have a push message subscription?
            serviceWorkerRegistration.pushManager.getSubscription()
                    .then(function(subscription) {
                        // Enable any UI which subscribes / unsubscribes from
                        // push messages.
                        console.log("ready subscription");

                        var pushButton = document.querySelector('.js-push-button');
                        pushButton.disabled = false;

                        if (!subscription) {
                            // We aren't subscribed to push, so set UI
                            // to allow the user to enable push
                            return;
                        }

                        // Keep your server in sync with the latest subscriptionId
                        sendSubscriptionToServer(subscription);

                        // Set your UI to show they have subscribed for
                        // push messages
                        pushButton.textContent = 'Disable Push Messages';
                        isPushEnabled = true;
                    })
                    .catch(function(err) {
                        console.warn('Error during getSubscription()', err);
                    });
        });
    }

    function subscribe() {
        // Disable the button so it can't be changed while
        // we process the permission request
        var pushButton = document.querySelector('.js-push-button');
        pushButton.disabled = true;

        navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
            serviceWorkerRegistration.pushManager.subscribe()
                    .then(function(subscription) {
                        // The subscription was successful
                        isPushEnabled = true;
                        pushButton.textContent = 'Disable Push Messages';
                        pushButton.disabled = false;

                        // TODO: Send the subscription.subscriptionId and
                        // subscription.endpoint to your server
                        // and save it to send a push message at a later date
                        return sendSubscriptionToServer(subscription);
                    })
                    .catch(function(e) {
                        if (Notification.permission === 'denied') {
                            // The user denied the notification permission which
                            // means we failed to subscribe and the user will need
                            // to manually change the notification permission to
                            // subscribe to push messages
                            console.warn('Permission for Notifications was denied');
                            pushButton.disabled = true;
                        } else {
                            // A problem occurred with the subscription; common reasons
                            // include network errors, and lacking gcm_sender_id and/or
                            // gcm_user_visible_only in the manifest.
                            console.error('Unable to subscribe to push.', e);
                            pushButton.disabled = false;
                            pushButton.textContent = 'Enable Push Messages';
                        }
                    });
        });
    }


    var isPushEnabled = false;


    window.addEventListener('load', function() {
        alert(1);
        var pushButton = document.querySelector('.js-push-button');
        pushButton.addEventListener('click', function() {
            alert(2);
            if (isPushEnabled) {
                unsubscribe();
            } else {
                subscribe();
            }
        });

        // Check that service workers are supported, if so, progressively
        // enhance and add push messaging support, otherwise continue without it.
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/noti/service-worker.js')
                    .then(initialiseState);
        } else {
            console.warn('Service workers aren\'t supported in this browser.');
        }

    });


</script>

</body>
</html>
